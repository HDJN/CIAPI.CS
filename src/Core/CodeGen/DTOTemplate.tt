<#@ Assembly Name="$(SolutionDir)packages\Newtonsoft.Json.3.5.8\lib\35\Newtonsoft.Json.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#+

public class DTOTemplate : Template
{
	public JObject typeObj { get; set; }
	public override string TransformText()
	{
		WriteClassDocumentation(typeObj);
		// is it a class or an enum
	    if (typeObj.Value["enum"] != null) 
		{ 
	        WriteEnumBegin(typeObj);
	        JArray options = (JArray)typeObj.Value["options"];
		    foreach (JObject value in options)
		    {
				WritePropertyDocumentation(value);
				WriteEnum(value);
            } 
			WriteEnumEnd(typeObj);
		} else {
			WriteClassBegin(typeObj); WriteClassExtends(typeObj);
	        JObject properties = (JObject)typeObj.Value["properties"];
            foreach (var kvp in properties) 
			{
				WritePropertyDocumentation(kvp);
				WriteProperty(kvp);
			}
			WriteClassEnd(typeObj);
		}
		return this.GenerationEnvironment.ToString();
	}
	
	protected virtual WriteClassDocumentation(JObject typeObj) 
	{
		
	}
	protected virtual WriteEnumBegin(JObject typeObj) 
	{
		
	}
	protected virtual WriteEnumEnd(JObject typeObj) 
	{
		
	}
	protected virtual WriteClassBegin(JObject typeObj) 
	{
		
	}
	protected virtual WriteClassEnd(JObject typeObj) 
	{
		
	}
	protected virtual WriteClassExtends(JObject typeObj) 
	{
		
	}
	protected virtual WritePropertyDocumentation(JObject kvp) 
	{
		
	}
	protected virtual WriteProperty(JObject kvp) 
	{
		
	}
	protected virtual WriteEnum(JObject typeObj) 
	{
		
	}
}

#>
