namespace BasicFormats
{
    using Fiddler;
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text;

    [ProfferFormat("MeddlerScript", "Meddler Scripts are played back from Meddler; see http://bayden.com/meddler/")]
    public class MeddlerExport : ISessionExporter, IDisposable
    {
        public void Dispose()
        {
        }

        private void EmitMeddlerFooter(StringBuilder sb)
        {
            sb.Append("\t\t}\r\n\t\toSession.CloseSocket();\r\n\t\t}\r\n\t\tcatch(e) {MeddlerObject.Log.LogString(\"Script threw exception\\n\"+e);}\r\n\t}\r\n}");
        }

        public bool ExportSessions(string sFormat, Session[] oSessions, Dictionary<string, object> dictOptions, EventHandler<ProgressCallbackEventArgs> evtProgressNotifications)
        {
            if (sFormat != "MeddlerScript")
            {
                return false;
            }
            string str = null;
            if ((dictOptions != null) && dictOptions.ContainsKey("Filename"))
            {
                str = dictOptions["Filename"] as string;
            }
            if (string.IsNullOrEmpty(str))
            {
                str = Utilities.ObtainSaveFilename("Export As " + sFormat, "MeddlerScript (*.ms)|*.ms");
            }
            if (!string.IsNullOrEmpty(str))
            {
                try
                {
                    StringBuilder sb = new StringBuilder();
                    int num = 0;
                    string str2 = null;
                    foreach (Session session in oSessions)
                    {
                        if (str2 == null)
                        {
                            str2 = "http://localhost:{$PORT}" + session.PathAndQuery;
                        }
                        sb.AppendFormat("\r\n\t\t\tif (oSession.requestHeaders.Path == '{0}')\r\n\t\t\t{{\r\n", session.PathAndQuery.Replace("'", @"\'"));
                        sb.AppendFormat("\r\n\t\t\t\toHeaders.Version='{0}';", session.oResponse.headers.HTTPVersion.Replace("'", @"\'"));
                        sb.AppendFormat("\r\n\t\t\t\toHeaders.Status='{0}';\r\n", session.oResponse.headers.HTTPResponseStatus.Replace("'", @"\'"));
                        foreach (HTTPHeaderItem item in session.oResponse.headers)
                        {
                            sb.AppendFormat("\r\n\t\t\t\toHeaders.Add('{0}', '{1}');", item.Name.Replace("'", @"\'"), item.Value.Replace("'", @"\'"));
                        }
                        sb.AppendFormat("\r\n\t\t\t\toSession.WriteString(oHeaders);\r\n", new object[0]);
                        sb.AppendFormat("\r\n\t\t\t\toSession.WriteBytes(Convert.FromBase64String('", new object[0]);
                        sb.AppendFormat(Convert.ToBase64String(session.responseBodyBytes), new object[0]);
                        sb.AppendFormat("'));\r\n", new object[0]);
                        sb.AppendFormat("\t\t\t\toSession.CloseSocket(); return;\r\n\t\t\t}}\r\n", new object[0]);
                        num++;
                        if (evtProgressNotifications != null)
                        {
                            ProgressCallbackEventArgs e = new ProgressCallbackEventArgs(((float) num) / ((float) oSessions.Length), "Added " + num.ToString() + " sessions to MeddlerScript.");
                            evtProgressNotifications(null, e);
                            if (e.Cancel)
                            {
                                return false;
                            }
                        }
                    }
                    this.PrependMeddlerHeader(sb, str2 ?? "http://localhost:{$PORT}/");
                    this.EmitMeddlerFooter(sb);
                    File.WriteAllText(str, sb.ToString());
                    return true;
                }
                catch (Exception exception)
                {
                    FiddlerApplication.ReportException(exception, "Failed to save MeddlerScript");
                    return false;
                }
            }
            return false;
        }

        private void PrependMeddlerHeader(StringBuilder sb, string sLaunchURI)
        {
            sb.Insert(0, "import Meddler;\r\nimport System;\r\nimport System.Net.Sockets;\r\nimport System.Windows.Forms;\r\n\r\n// Script generated by Fiddler2 export.\r\n//\r\n// You can set options for this script using the format:\r\n//     ScriptOptions(\"StartURL\" (where {$PORT} is autoreplaced by the Meddler port number), \"Optional HTTPS Certificate Thumbprint\", \"Random # Seed\")\r\npublic ScriptOptions(\"" + sLaunchURI + "\")\r\nclass Handlers\r\n{\r\n\tstatic function OnConnection(oSession: Session)\r\n\t{\r\n\ttry {\r\n\t\tif (oSession.ReadRequest())\r\n\t\t{\r\n\t\t\tvar oHeaders: ResponseHeaders = new ResponseHeaders();");
        }
    }
}

